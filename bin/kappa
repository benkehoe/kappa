#!/usr/bin/env python
# Copyright (c) 2014 Mitch Garnaat http://garnaat.org/
#
# Licensed under the Apache License, Version 2.0 (the "License"). You
# may not use this file except in compliance with the License. A copy of
# the License is located at
#
# http://aws.amazon.com/apache2.0/
#
# or in the "license" file accompanying this file. This file is
# distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
# ANY KIND, either express or implied. See the License for the specific
# language governing permissions and limitations under the License.
from datetime import datetime
import logging
import base64
import exceptions
import sys, os, os.path

import yaml

import click

from kappa.context import Context
from kappa.function import Function

@click.group()
@click.option(
    '--config',
    #default='kappa.yaml',
    #type=click.File('rb'),
    envvar='KAPPA_CONFIG',
)
@click.option(
    '--debug/--no-debug',
    default=False,
    help='Turn on debugging output'
)
@click.pass_context
def cli(ctx, config=None, debug=False, new=False):
    err = []
    found = False
    configFile = None
    if config is not None and os.path.dirname(config):
        config = [config]
        try:
            configPath = os.path.abspath(config[0])
            configFile = open(configPath, 'rb')
            found = True
        except exceptions.IOError, e:
            err.append(e.strerror)
        except Exception, e:
            err.append(str(e))
    else:
        if config is not None:
            config = [config]
        else:
            config = ['kappa.yaml', 'kappa.yml']
        d = os.getcwd()
        while not found:
            for cfg in config:
                try:
                    configPath = os.path.join(d, cfg)
                    configFile = open(configPath, 'rb')
                    os.chdir(d)
                    found = True
                    break
                except exceptions.IOError, e:
                    errstr = e.strerror
                    if not err or errstr not in err:
                        err.append(errstr)
                except Exception, e:
                    errstr = str(e)
                    if not err or errstr not in err:
                        err.append(errstr)
            newd = os.path.dirname(d)
            if not newd or newd == d:
                break
            d = newd

    if '--help' not in sys.argv:
        if ctx.invoked_subcommand != 'init' and not found:
            raise click.FileError(config[0], hint=', '.join(err))
        if ctx.invoked_subcommand == 'init' and found:
            raise click.ClickException('Cannot create project within another project')

    ctx.obj['debug'] = debug
    ctx.obj['config'] = yaml.load(configFile) if configFile else None
    ctx.obj['name'] = os.path.basename(os.path.dirname(configPath))

@cli.command()
@click.argument('name')
@click.pass_context
def init(ctx, name):
    if not os.path.isdir(name):
        os.mkdir(name)
    with open(os.path.join(name, 'kappa.yaml'), 'w') as fp:
        fp.write(KAPPA_NEW_CONFIG)
    os.mkdir(os.path.join(name, 'src'))

@cli.command()
@click.option(
    '--code-only',
    '-c',
    is_flag=True,
)
@click.option(
    '--s3',
    metavar='BUCKET',
)
@click.option(
    '--s3-only',
    is_flag=True,
)
@click.option(
    '--s3-key',
)
@click.pass_context
def deploy(ctx, code_only=False, s3=None, s3_only=None, s3_key=None):
    if s3:
        ctx.obj['config']['s3'] = ctx.obj['config'].get('s3', {})
        ctx.obj['config']['s3']['bucket'] = s3
    if s3_only is not None:
        ctx.obj['config']['s3'] = ctx.obj['config'].get('s3', {})
        ctx.obj['config']['s3']['only'] = s3_only
    if s3_key:
        ctx.obj['config']['s3'] = ctx.obj['config'].get('s3', {})
        ctx.obj['config']['s3']['key'] = s3_key
    context = Context(ctx.obj['name'], ctx.obj['config'], ctx.obj['debug'])
    click.echo('deploying...')
    if code_only:
        context.update_code()
    else:
        context.deploy()
    click.echo('...done')

def load_input(context, input, input_file):
    if input_file:
        return input_file.read()
    elif input:
        return input
    else:
        return context.function.test_data

@cli.command()
@click.option(
    '--async',
    is_flag=True,
)
@click.option(
    '--input',
    help='Specify input in argument',
)
@click.option(
    '--input-file',
    type=click.File('rb'),
    help='File to load input from',
)
@click.option(
    '--dry-run',
    is_flag=True,
)
@click.option(
    '--local',
    is_flag=True,
)
@click.pass_context
def invoke(ctx, async=False, input=None, input_file=None, dry_run=False, local=False):
    context = Context(ctx.obj['name'], ctx.obj['config'], ctx.obj['debug'])
    input = load_input(context, input, input_file)

    click.echo('invoking...')
    if local:
        response = context.invoke_local(input)
        click.echo(response)
    elif async:
        response = context.invoke_async(input)
        click.echo(response)
    else:
        response = context.invoke(input, dry_run=dry_run)
        if 'LogResult' in response:
            log_data = base64.b64decode(response['LogResult'])
            click.echo(log_data)
        click.echo(response['Payload'].read())
    click.echo('...done')

@cli.command()
@click.pass_context
def tail(ctx):
    context = Context(ctx.obj['name'], ctx.obj['config'], ctx.obj['debug'])
    click.echo('tailing logs...')
    for e in context.tail()[-10:]:
        ts = datetime.utcfromtimestamp(e['timestamp']//1000).isoformat()
        click.echo("{}: {}".format(ts, e['message']))
    click.echo('...done')

@cli.command()
@click.pass_context
def status(ctx):
    context = Context(ctx.obj['name'], ctx.obj['config'], ctx.obj['debug'])
    status = context.status()
    click.echo(click.style('Policy', bold=True))
    if status['policy']:
        line = '    {} ({})'.format(
            status['policy']['PolicyName'],
            status['policy']['Arn'])
        click.echo(click.style(line, fg='green'))
    click.echo(click.style('Role', bold=True))
    if status['role']:
        line = '    {} ({})'.format(
            status['role']['Role']['RoleName'],
            status['role']['Role']['Arn'])
        click.echo(click.style(line, fg='green'))
    click.echo(click.style('Function', bold=True))
    if status['function']:
        line = '    {} ({})'.format(
            status['function']['Configuration']['FunctionName'],
            status['function']['Configuration']['FunctionArn'])
        click.echo(click.style(line, fg='green'))
    else:
        click.echo(click.style('    None', fg='green'))
    click.echo(click.style('Event Sources', bold=True))
    if status['event_sources']:
        for event_source in status['event_sources']:
            if event_source:
                line = '    {}: {}'.format(
                    event_source['EventSourceArn'], event_source['State'])
                click.echo(click.style(line, fg='green'))
            else:
                click.echo(click.style('    None', fg='green'))

@cli.command()
@click.pass_context
def delete(ctx):
    context = Context(ctx.obj['name'], ctx.obj['config'], ctx.obj['debug'])
    click.echo('deleting...')
    context.delete()
    click.echo('...done')

@cli.command()
@click.pass_context
def add_event_sources(ctx):
    context = Context(ctx.obj['name'], ctx.obj['config'], ctx.obj['debug'])
    click.echo('adding event sources...')
    context.add_event_sources()
    click.echo('...done')

@cli.command()
@click.pass_context
def update_event_sources(ctx):
    context = Context(ctx.obj['name'], ctx.obj['config'], ctx.obj['debug'])
    click.echo('updating event sources...')
    context.update_event_sources()
    click.echo('...done')


KAPPA_NEW_CONFIG = """# Profile and region will get picked up automatically if not set
#profile: personal
#region: us-east-1

iam:
  # Existing managed policies only need a name.
  # If only a single policy is used, it doesn't need to be inside a list.
  policy:
    - name: AWSLambdaExecute
    - name: MyPolicy
      document: >
        {{
          "Version": ...
        }}

  # The IAM role used for executing the Lambda function defaults to the project name.
  # Set role to the object {{"name": <RoleName>}} to override
  # The policy listed above will be attached to this role once it is created.
  role: True
lambda:
  # Defaults to project name
  name: MyLambdaFunction

  # Optional
  description: Description of my Lambda function

  # Required
  handler: module_name.function_name

  # Defaults to {default_memory}
  memory_size: {default_memory}

  # Defaults to {default_timeout}
  timeout: {default_timeout}

  # Defaults to src
  path: src/

  # Optional: upload zip to S3
  s3:
    # Set this to upload the zip but not deploy it when calling kappa deploy
    #only: True

    bucket: MyBucket

    # Optional, defaults to project name
    key: MyLambdaFunctionKey

  # Optional
  permissions:
    - statement_id: s3_invoke
      action: lambda:invokeFunction
      principal: s3.amazonaws.com
      # Change this to refer to your own SNS topic
      source_arn: arn:aws:s3:::test-1245812163

  # Optional
  event_sources:
    - arn: arn:aws:s3:::test-1245812163
      events:
        - s3:ObjectCreated:*

  # Defaults to project name + .zip
  zipfile_name: MyLambdaFunction.zip

  # Automatically set based on contents of path
  runtime: python2.7 | nodejs

  #test_data: input.json
""".format(
    default_memory=Function.DEFAULT_MEMORY,
    default_timeout=Function.DEFAULT_TIMEOUT,
)

if __name__ == '__main__':
    cli(obj={})
